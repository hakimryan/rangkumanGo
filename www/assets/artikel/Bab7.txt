Fungsi

Mari kita simak kembali program untuk menghitung rataan.

package main 

import "fmt"

func main() {
	xs := []float64{84, 89, 93, 79, 87}

	total := 0.0
	for _, v := range xs {
		total += v
	}
	fmt.Println(total/float64(len(xs)))
}

Kita buat fungsi bernama average, letakkan sebelum fungsi main.

func average(xs []float64) float64 {
	panic("Not implemented.")
} 

Sebuah fungsi diawali dengan keyword func dan diikuti dengan nama fungsinya. Parameter atau input atau argumen dari fungsi didefinisikan dengan nama type, nama type, ... Setelah parameter, ada keluaran fungsi.

Fungsi berisi set instruksi yang berada di dalam kurung { }. Contohnya pada program di atas kita memanggil panic yang menyebabkan runtime error.

Sekarang kita masukkan instruksi untuk menghitung rataan ke dalam fungsi average.

func average(xs []float64) float64 {
	total := 0.0
	for _, v := range xs {
		total += v
	}
	return total/float64(len(xs))
} 

dan modifikasi fungsi main. 

func main() {
	xs := []float64{84, 89, 93, 79, 87}
	fmt.Println(average(xs))
}

Kita dapat menggunakan format berikut untuk menulis keluaran fungsi.

func f() (r int) {
	r = 1
	return
}

Selain itu, fungsi dapat menghasilkan keluaran lebih dari satu.

func f() (x int, y int) {
	x := 1
	y := 2
	return
}

dan cara memanggilnya

x, y := f()

Fungsi Variadic

Perhatikan kode berikut ini

func tambah(args ...int) int {
	total := 0
	for _, v := range args {
		total += v
	}
	return total
}
func main() {
	fmt.Println(tambah(1,2,3,4,5))
}

Dengan menggunakan ... sebelum tipe masukan kita dapat memasukkan input sebanyak yang kita mau. Kita dapat memasukkan input berupa slice, contohnya:

func main() {
	xs := []int{1,2,3,4,5}
	fmt.Println(tambah(xs...))
}

Closure
Fungsi dalam fungsi juga dapat kita buat, contohnya:

package main 

import "fmt"

func main() {
	tambah := func(x, y int) int {
		return x + y
	}
	fmt.Println(tambah(2,4))
}

variabel add bernilai suatu fungsi. Fungsi ini dapat mengakses variabel lokal dan variabel di fungsi ini juga dapat diakses.

Keluaran (return) dari suatu fungsi juga dapat menggunakan fungsi.

package main 

import "fmt"

func buatBilanganGenap() func() uint {
	i := uint(0)
	return func() (ret uint) {
		ret = i
		i += 2
		return
	}
}

func main() {
	genap := buatBilanganGenap()
	fmt.Println(genap())
	fmt.Println(genap())
	fmt.Println(genap())
}

Rekursi
Fungsi juga dapat memanggil fungsi itu sendiri. Hal ini disebut fungsi rekursif. Contohnya menghitung faktorial.

func factorial(x uint) uint {
	if x == 0 {
		return 1
	}

	return x * factorial(x-1)
}

Pada bagian return, factorial memanggil fungsi factorial sendiri.

Defer, Panic, dan Recover

Go memiliki statement khusus yaitu defer yang menjalankan perintah setelah semua perintah di dalam fungsi selesai. Contoh:

package main 

import "fmt"

func first() {
	fmt.Println("1st")
}
func second() {
	fmt.Println("2nd")
}
func main() {
	defer second()
	first()
}

Program di atas akan menampilkan 1st, kemudian 2nd. Dasarnya, defer memindahkan perintah ke bagian akhir fungsi.

Defer biasanya digunakan untuk membuang resource yang tidak dipakai lagi, contohnya ketika membuka file:

f, _ := os.Open(filename)
defer f.Close()

Keuntungannya (1) perintah Close dekat dengan perintah Open sehingga mudah dikenal, (2) jika fungsi kita memiliki keluaran lebih dari satu, Close akan dijalankan sebelum itu, (3) fungsi yang di-defer akan berjalan meskipun terjadi run-time panic.

Panic dan Recover
Panic dibuat agar program berhenti, sedangkan recover akan menghentikan panic dan mengembalikan nilai yang dibuat ketika terjadi panic. Contohnya:

package main 

import "fmt"

func main() {
	panic("PANIC")
	str := recover()
	fmt.Println(str)
}

akan tetapi, perintah recover tidak akan dijalankan. Kita harus memasukkan perintah defer pada recover.

package main 

import "fmt"

func main() {
	defer func() {
		str := recover()
		fmt.Println(str)
	}()
	panic("PANIC")
}

