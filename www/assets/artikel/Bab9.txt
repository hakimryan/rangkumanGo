Struct dan Interface

Perhatikan program berikut:

package main 

import (
	"fmt"
	"math"
)

func distance(x1, y1, x2, y2 float64) float64 {
	a := x2 - x1
	b := y2 - y1
	return math.Sqrt(a*a + b*b)
}

func rectangleArea(x1, y1, x2, y2 float64) float64 {
	l := distance(x1, y1, x1, y2)
	w := distance(x1, y1, x2, y1)
	return l * w
}

func circleArea(x, y, r float64) float64 {
	return math.Pi * r*r
}

func main() {
	var rx1, ry1 float64 = 0, 0
	var rx2, ry2 float64 = 10, 10
	var cx, cy, cr float64 = 0, 0, 5

	fmt.Println(rectangleArea(rx1, ry1, rx2, ry2))
	fmt.Println(circleArea(cx, cy, cr))
}

Mari kita gunakan konsep Struct untuk program di atas.

Kita representasikan data-data lingkaran sebagai berikut:

type Circle struct {
	x float64
	y float64
	r float64
}

Keyword type membuat tipe baru, pada contoh di atas tipe baru ini adalah Circle. Keyword struct mendefinisikan bahwa kita membuat tipe struct yang berisi data-data.

Tipe Circle dapat disederhanakan pengetikannya menjadi:

type Circle struct {
	x, y, r float64
}

Untuk membuat variabel, kita ketik

var c Circle

atau

c := new(Circle)

atau

c := Circle{x: 0, y: 0, r: 5}

atau

c := Circle{0, 0, 5}

Kita dapat mengakses data dalam struct menggunakan . (titik).

fmt.Println(c.x, c.y, c.r)
c.x = 10
c.y = 5

Dan akhirnya, kita modifikasi fungsi circleArea

func circleArea(c Circle) float64 {
	return math.Pi * c.r*c.r 
}

di fungsi main kita modifikasi:

c := Circle{0, 0, 5}
fmt.Println(circleArea(c))

Method
Kita gunakan teknik yang dinamakan method untuk memodifikasi lagi fungsi circleArea

func (c *Circle) area() float64 {
	return math.Pi * c.r*c.r
}

Dan selanjutnya kita gunakan teknik method untuk rectangleArea:

type Rectangle struct {
	x1, y1, x2, y2 float64
}

func (r *Rectangle) area() float64 {
	l := distance(r.x1, r.y1, r.x1, r.y2)
	w := distance(r.x1, r.y1, r.x2, r.y1)
	return l * w
}

di fungsi main:

r := Rectangle{0, 0, 10, 10}
fmt.Println(r.area())

Kode akhir dari programnya adalah:

package main 

import (
	"fmt"
	"math"
)

type Rectangle struct {
	x1, y1, x2, y2 float64
}

type Circle struct {
	x, y, r float64
}

func distance(x1, y1, x2, y2 float64) float64 {
	a := x2 - x1
	b := y2 - y1
	return math.Sqrt(a*a + b*b)
}

func (c *Circle) area() float64 {
	return math.Pi * c.r*c.r 
}

func (r *Rectangle) area() float64 {
	l := distance(r.x1, r.y1, r.x1, r.y2)
	w := distance(r.x1, r.y1, r.x2, r.y1)
	return l * w
}

func main() {
	c := Circle{0, 0, 5}
	r := Rectangle{0, 0, 10, 10}
	fmt.Println(r.area())
	fmt.Println(c.area())
}

Interface

Luas persegi panjang dan lingkaran memakai method yang sama. Kita dapat menggunakan interface, contohnya:

type Shape interface {
	area() float64
}

Seperti struct, interface juga dibuat menggunakan keyword type, diikuti nama, dan keyword interface.

Kemudian:

func totalArea(shapes ...Shape) float64 {
	var area float64
	for _, s := range shapes {
		area += s.area()
	}
	return area
}

Fungsi di atas dapat kita panggil:

fmt.Println(totalArea(&c, &r))

Interface juga dapat diisi:

type MultiShape struct {
	shapes []Shape
}

Kemudian:

func (m *MultiShape) area() float64 {
	var area float64
	for _, s := range m.shapes {
		area += s.area()
	{
	return area
}

Dan sekarang, MultiShape dapat memiliki Circle, Rectangle, atau bentuk lainnya.
